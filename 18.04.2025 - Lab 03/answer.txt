1. Tại sao cần dùng abstract class và interface trong Java?
Abstract class cho phép định nghĩa một lớp cha chung với một phần cài đặt sẵn, còn lại để các lớp con cụ thể hóa.
Interface dùng để định nghĩa các hành vi chung mà nhiều lớp khác nhau có thể cùng thực hiện (đa kế thừa hành vi).
Trong bài lab, Media là một abstract class dùng chung cho Book, DVD, CD. Interface Playable giúp Track, DVD, CD cùng implement hành vi play().

2. Tại sao nên dùng ArrayList thay vì mảng cố định?
Vì ArrayList linh hoạt hơn mảng cố định vì có thể thay đổi kích thước tự động.
Khi cập nhật Cart và Store, dùng ArrayList<Media> giúp dễ dàng thêm/bớt các loại media mới mà không cần viết nhiều phương thức riêng lẻ.

3. Lợi ích của việc override phương thức equals()?
Giúp so sánh đối tượng dựa trên thuộc tính cần thiết (ví dụ: so sánh Media theo title, Track theo title và length).
Cho phép sử dụng đúng cách với contains(), remove() trong ArrayList.

4. Vì sao nên dùng toString() và Polymorphism?
toString() giúp hiển thị thông tin đối tượng một cách thân thiện.
Khi dùng polymorphism, gọi toString() trên đối tượng Media sẽ tự động gọi phiên bản phù hợp của Book, DVD, CD.

5. Tại sao cần Comparator cho sorting?
Comparator cho phép sắp xếp theo nhiều tiêu chí, ví dụ:
Theo title rồi cost
Hoặc theo cost rồi title
Giúp người dùng sắp xếp cart theo mong muốn.

6. Khác biệt giữa Comparator và Comparable?
Comparable: chỉ định một quy tắc so sánh duy nhất trong class (thông qua compareTo()).
Comparator: cho phép tạo nhiều cách sắp xếp ngoài class gốc.

7. Lợi ích của tổ chức lại cấu trúc project theo package?
Dễ quản lý code, chia module rõ ràng: aims.media, aims.cart, test.cart,…
Giúp tuân thủ quy ước Java naming và cấu trúc cho dự án lớn
